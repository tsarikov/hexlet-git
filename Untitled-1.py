''' Функция принимает список из целых чисел и возвращает список, перечисляющий наличие непрерывных возрастающих последовательностей
целых чисел. Если такой последовательности нет, то вызвращает пустой список []. Если входной список будет таким: [1, 2, 3, 5, 10, 15, 16, 17, 18, 20],
то вывод будет таким: ['1 -> 3', '15 -> 18']. '''




def summary_ranges(listing):
    list_of_ranges = []
    if len(listing) < 2:
        return list_of_ranges # если длина исследуемого списка меньше 2-х элементов, то это не последовательность и возвращаем пустой список
    else:
        start_index = 0 # начинаем поиск с начала исследуемого списка (индекс первого элемента = 0)
        counter = 0 # в этой переменной хранится количество элементов спава от первого, которые удовлетворяют правилу непрерывности 
        while start_index <= len(listing) - 1: #повторяем проверку пока не достигли конца исследуемой последовательности
           inner_index = start_index #стартуем проверку с элемента исходного списка, который не удовлетворяет правилу непрерывности
           while (inner_index < len(listing) - 1) and (listing[inner_index] == listing[inner_index + 1] - 1): #если мы не дошли до предпоследнего элемента и текущий 
                                                                                                              #элемент меньше на 1, чем следующий, то: 
              inner_index += 1 # сдвигаемся на 1 элемент вправо
              counter += 1     # увеличиваем на 1 количество элементов искомой последовательности
           if counter > 0:  # если счетчик элементов искомой последовательности > 1, то:
                list_of_ranges.append(f'{listing[start_index]} -> {listing[start_index+counter]}') # добавляем в итоговый список значения исследуемого списка со стартовым 
                                                                                                    # индексом и значение элемента отсоящего на посчитанное количество элементов правее от начала
           counter = 0 #обнуляем счетчик элементов последовательности для потска новой последовательности
           start_index = inner_index + 1 #выставляем старт нового поиска со следующего за последним исследованным элементом

    return list_of_ranges

'''Данный алгоритм делает проверку на наличие искомых последовательностей за один проход по элементам исследуемого списка и формирует новый список во время этого прохода.'''

print(summary_ranges([1,2,3,4,7,8,10,-1,0,1,7,3,6,1,2]))
print(summary_ranges([1,2,3,4,7,9,10]))
print(summary_ranges([1, 2, 3, 5, 10, 15, 16, 17, 18, 20]))